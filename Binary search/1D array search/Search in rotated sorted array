There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        start= 0
        end= len(nums)-1
        while(start<=end):
            mid = (start+end)//2
            if(nums[mid]==target):
                return mid
            if(nums[start]<=nums[mid]):
                if(nums[start]<= target and target <=nums[mid]):
                    end = mid-1
                else:
                    start = mid+1
            else:
                if(nums[mid]<= target  and target<=nums[end]):
                    start = mid+1
                else:
                    end = mid-1
        return -1

        
challenges:
since what i learned is binary search can only apply to sorted spaces
this is not sorted by twickingly applying binary search here

after i found i decide which side to got as this is not sorted now
so i check whether my mid is greater than start so its left but also i need to check target is greater than start and less than mid
this way i can decide to either go left or right