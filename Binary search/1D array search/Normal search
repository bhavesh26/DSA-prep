class Solution:
    def search(self, nums: List[int], target: int) -> int:
        start = 0
        end = len(nums)-1
        while(start<=end):
            mid = int((start + end)/2)
            if(nums[mid]<target):
                start = mid+1
            elif(nums[mid]>target):
                end = mid-1
            else:
                return mid
        return -1

find mid and compare it with target and return mid
run in O(logn) time complexity
binary search can be applied at places where it search space is sorted not necessary only arrays
but in general wherever search space is sorted